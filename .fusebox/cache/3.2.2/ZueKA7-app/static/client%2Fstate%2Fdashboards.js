module.exports = { contents: "'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.actionReducers = exports.initialState = exports.selectors = exports.namespace = undefined;\n\nvar _immutable = require('immutable');\n\nvar _reduxAutomap = require('redux-automap');\n\nvar _reselect = require('reselect');\n\nvar _dashboards = require('./dashboards.models');\n\n(function () {\n  var enterModule = require('react-hot-loader').enterModule;\n\n  enterModule && enterModule(module);\n})();\n\nvar namespace = exports.namespace = 'dashboards';\n\nvar getTags = function getTags(state) {\n  return state.get('tags');\n};\nvar getGroups = function getGroups(state) {\n  return state.get('groups');\n};\nvar findTag = function findTag(state, id) {\n  return state.get('tags').find(function (tag) {\n    return tag.get('id') === id;\n  });\n};\nvar findGroup = function findGroup(state, id) {\n  return state.get('groups').find(function (group) {\n    return group.get('id') === id;\n  });\n};\nvar getLastId = function getLastId(items) {\n  return items.maxBy(function (i) {\n    return i.get('id');\n  }).get('id');\n};\nvar getLastTagID = (0, _reselect.createSelector)(getTags, getLastId);\nvar getLastGroupID = (0, _reselect.createSelector)(getGroups, getLastId);\n\nvar selectors = exports.selectors = {\n  getTags: getTags, findTag: findTag\n\n  // initial state for reducer\n};var initialState = exports.initialState = (0, _immutable.fromJS)({\n  tags: [{ id: 1, name: 'foo' }, { id: 2, name: 'bar' }, { id: 3, name: 'baz' }, { id: 4, name: 'cat' }, { id: 5, name: 'miffles' }, { id: 6, name: 'vlad' }, { id: 7, name: 'baxter' }],\n  groups: [new _dashboards.Group({ id: 1, name: 'First Group' })]\n});\n\n// define all action/reducer pairs here... add \"type\" attributes for\nvar actionReducers = exports.actionReducers = [{\n  addGroup: function addGroup(name, parent) {\n    return { type: 'list/ADD_GROUP', name: name, parent: parent };\n  },\n  reducer: function reducer(state, action) {\n    var nextID = getLastGroupID(state) + 1;\n\n    return state.update('groups', function (groups) {\n      return groups.push(new _dashboards.Group({ id: nextID, name: action.name, parent: action.parent }));\n    });\n  }\n}, {\n  addTagToGroup: function addTagToGroup(tagID, groupID) {\n    return { type: 'list/ADD_TAG_TO_GROUP', tagID: tagID, groupID: groupID };\n  },\n  reducer: function reducer(state, action) {\n    var tag = findTag(state, action.tagID);\n    var matchedGroup = findGroup(state, action.groupID);\n\n    console.log('matched tag', tag.toJS());\n    console.log('matched group', matchedGroup.toJS());\n\n    if (!tag) {\n      throw new Error('no tag found with id=' + tagID, action);\n      return state;\n    }\n\n    if (!matchedGroup) {\n      throw new Error('no group found with id=' + groupID, action);\n      return state;\n    }\n\n    return state.update('groups', function (groups) {\n      return groups.map(function (group) {\n        return group === matchedGroup ? group.update('tags', function (tags) {\n          return tags.push(new _dashboards.GroupedTag({ id: tag.get('id'), name: tag.get('name') }));\n        }) : group;\n      });\n    });\n  }\n}];\n\nvar _default = (0, _reduxAutomap.automap)({ namespace: namespace, actionReducers: actionReducers, initialState: initialState, selectors: selectors });\n\nexports.default = _default;\n;\n\n(function () {\n  var reactHotLoader = require('react-hot-loader').default;\n\n  var leaveModule = require('react-hot-loader').leaveModule;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(namespace, 'namespace', 'unknown');\n  reactHotLoader.register(getTags, 'getTags', 'unknown');\n  reactHotLoader.register(getGroups, 'getGroups', 'unknown');\n  reactHotLoader.register(findTag, 'findTag', 'unknown');\n  reactHotLoader.register(findGroup, 'findGroup', 'unknown');\n  reactHotLoader.register(getLastId, 'getLastId', 'unknown');\n  reactHotLoader.register(getLastTagID, 'getLastTagID', 'unknown');\n  reactHotLoader.register(getLastGroupID, 'getLastGroupID', 'unknown');\n  reactHotLoader.register(selectors, 'selectors', 'unknown');\n  reactHotLoader.register(initialState, 'initialState', 'unknown');\n  reactHotLoader.register(actionReducers, 'actionReducers', 'unknown');\n  reactHotLoader.register(_default, 'default', 'unknown');\n  leaveModule(module);\n})();\n\n;",
dependencies: ["immutable","redux-automap","reselect","./dashboards.models","react-hot-loader","react-hot-loader","react-hot-loader"],
sourceMap: "{\"version\":3,\"sources\":[\"/client/state/dashboards.js\"],\"names\":[\"namespace\",\"getTags\",\"state\",\"get\",\"getGroups\",\"findTag\",\"id\",\"find\",\"tag\",\"findGroup\",\"group\",\"getLastId\",\"items\",\"maxBy\",\"i\",\"getLastTagID\",\"getLastGroupID\",\"selectors\",\"initialState\",\"tags\",\"name\",\"groups\",\"Group\",\"actionReducers\",\"addGroup\",\"parent\",\"type\",\"reducer\",\"action\",\"nextID\",\"update\",\"push\",\"addTagToGroup\",\"tagID\",\"groupID\",\"matchedGroup\",\"console\",\"log\",\"toJS\",\"Error\",\"map\",\"GroupedTag\"],\"mappings\":\"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\",\"file\":\"client/state/dashboards.js\",\"sourcesContent\":[\"import { fromJS, Record } from 'immutable'\\nimport { automap } from 'redux-automap'\\nimport { createSelector } from 'reselect'\\nimport { Group, Tag, GroupedTag } from './dashboards.models'\\n\\nexport const namespace = 'dashboards'\\n\\nconst getTags = state => state.get('tags')\\nconst getGroups = state => state.get('groups')\\nconst findTag = (state, id) => state\\n                                .get('tags')\\n                                .find(tag => tag.get('id') === id)\\nconst findGroup = (state, id) => state\\n                                .get('groups')\\n                                .find(group => group.get('id') === id)\\nconst getLastId = items => items.maxBy(i => i.get('id')).get('id')\\nconst getLastTagID = createSelector(getTags, getLastId)\\nconst getLastGroupID = createSelector(getGroups, getLastId)\\n\\nexport const selectors = {\\n  getTags, findTag\\n}\\n\\n// initial state for reducer\\nexport const initialState = fromJS({\\n  tags: [\\n    { id: 1, name: 'foo' },\\n    { id: 2, name: 'bar' },\\n    { id: 3, name: 'baz' },\\n    { id: 4, name: 'cat' },\\n    { id: 5, name: 'miffles' },\\n    { id: 6, name: 'vlad' },\\n    { id: 7, name: 'baxter' },\\n  ],\\n  groups: [\\n    new Group({ id: 1, name: 'First Group' })\\n  ]\\n})\\n\\n// define all action/reducer pairs here... add \\\"type\\\" attributes for\\nexport const actionReducers = [\\n  {\\n    addGroup: (name, parent) => ({ type: 'list/ADD_GROUP', name, parent }),\\n    reducer: (state, action) => {\\n      let nextID = getLastGroupID(state) + 1\\n\\n      return state.update('groups', groups => groups.push(\\n        new Group({ id: nextID, name: action.name, parent: action.parent })\\n      ))\\n    }\\n  },\\n  {\\n    addTagToGroup: (tagID, groupID) => ({ type: 'list/ADD_TAG_TO_GROUP', tagID, groupID }),\\n    reducer: (state, action) => {\\n      let tag = findTag(state, action.tagID)\\n      let matchedGroup = findGroup(state, action.groupID)\\n\\n      console.log('matched tag', tag.toJS())\\n      console.log('matched group', matchedGroup.toJS())\\n\\n      if (!tag) {\\n        throw new Error(`no tag found with id=${tagID}`, action)\\n        return state\\n      }\\n\\n      if (!matchedGroup) {\\n        throw new Error(`no group found with id=${groupID}`, action)\\n        return state\\n      }\\n\\n      return state\\n              .update('groups',\\n                groups => groups.map(\\n                  group => group === matchedGroup\\n                            ? group.update('tags', tags => tags.push(new GroupedTag({ id: tag.get('id'), name: tag.get('name') })))\\n                            : group\\n                )\\n              )\\n    }\\n  },\\n]\\n\\nexport default automap({ namespace, actionReducers, initialState, selectors })\\n\"]}",
headerContent: undefined,
mtime: 1529087373208,
devLibsRequired : undefined,
ac : undefined,
_ : {}
}
