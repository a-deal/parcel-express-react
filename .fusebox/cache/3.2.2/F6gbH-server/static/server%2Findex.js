module.exports = { contents: "'use strict';\n\nvar _express = require('express');\n\nvar _express2 = _interopRequireDefault(_express);\n\nvar _bodyParser = require('body-parser');\n\nvar _bodyParser2 = _interopRequireDefault(_bodyParser);\n\nvar _compression = require('compression');\n\nvar _compression2 = _interopRequireDefault(_compression);\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\nvar _fs = require('fs');\n\nvar _fs2 = _interopRequireDefault(_fs);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(function () {\n  var enterModule = require('react-hot-loader').enterModule;\n\n  enterModule && enterModule(module);\n})();\n\n// load .env using dotenv first\nrequire('env-autoload');\n\n// include other main deps\n\n// const pkg = require('../package.json')\n\n\n// instantiate express\nvar app = (0, _express2.default)();\nvar PRODUCTION = process.env.NODE_ENV === 'production';\n\napp.use(_bodyParser2.default.json());\napp.use(_bodyParser2.default.urlencoded({ extended: false }));\napp.use((0, _compression2.default)());\n\n// static serving from /dist/client\nvar staticPath = _path2.default.join(__dirname, '../dist/client');\nconsole.log('serving static content from ' + staticPath);\napp.use(_express2.default.static(staticPath));\n// app.use('/client', express.static(staticPath))\n\n// example API entry\napp.get('/test', function (req, res) {\n  return res.json({\n    foo: 'bar',\n    mode: process.env.NODE_ENV,\n    port: process.env.PORT,\n    test: process.env.TEST,\n    production: PRODUCTION\n  });\n});\n\n// json import support\napp.get('/package.json', function (req, res) {\n  return setTimeout(function () {\n    _fs2.default.readFile(_path2.default.join(__dirname, '../package.json'), 'utf8', function (err, data) {\n      if (err) throw err;\n      var pkg = JSON.parse(data);\n\n      var chance = Math.random() > 0.4;\n      chance && res.json(pkg) || res.status(403).send();\n    });\n  }, 1000);\n});\n\nvar serverPort = process.env.PORT || 3000;\napp.listen(serverPort);\nconsole.log('Express server @ http://localhost:' + serverPort + ' (' + (PRODUCTION ? 'production' : 'development') + ')\\n');\n;\n\n(function () {\n  var reactHotLoader = require('react-hot-loader').default;\n\n  var leaveModule = require('react-hot-loader').leaveModule;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(app, 'app', 'unknown');\n  reactHotLoader.register(PRODUCTION, 'PRODUCTION', 'unknown');\n  reactHotLoader.register(staticPath, 'staticPath', 'unknown');\n  reactHotLoader.register(serverPort, 'serverPort', 'unknown');\n  leaveModule(module);\n})();\n\n;",
dependencies: ["express","body-parser","compression","path","fs","react-hot-loader","env-autoload","react-hot-loader","react-hot-loader","process"],
sourceMap: "{\"version\":3,\"sources\":[\"/server/index.js\"],\"names\":[\"require\",\"app\",\"PRODUCTION\",\"process\",\"env\",\"NODE_ENV\",\"use\",\"bodyParser\",\"json\",\"urlencoded\",\"extended\",\"staticPath\",\"path\",\"join\",\"__dirname\",\"console\",\"log\",\"express\",\"static\",\"get\",\"req\",\"res\",\"foo\",\"mode\",\"port\",\"PORT\",\"test\",\"TEST\",\"production\",\"setTimeout\",\"fs\",\"readFile\",\"err\",\"data\",\"pkg\",\"JSON\",\"parse\",\"chance\",\"Math\",\"random\",\"status\",\"send\",\"serverPort\",\"listen\"],\"mappings\":\";;AAIA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;AARA;AACAA,QAAQ,cAAR;;AAEA;;AAMA;;;AAGA;AACA,IAAMC,MAAM,wBAAZ;AACA,IAAMC,aAAaC,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAA5C;;AAEAJ,IAAIK,GAAJ,CAAQC,qBAAWC,IAAX,EAAR;AACAP,IAAIK,GAAJ,CAAQC,qBAAWE,UAAX,CAAsB,EAAEC,UAAU,KAAZ,EAAtB,CAAR;AACAT,IAAIK,GAAJ,CAAQ,4BAAR;;AAEA;AACA,IAAMK,aAAaC,eAAKC,IAAL,CAAUC,SAAV,EAAqB,gBAArB,CAAnB;AACAC,QAAQC,GAAR,kCAA2CL,UAA3C;AACAV,IAAIK,GAAJ,CAAQW,kBAAQC,MAAR,CAAeP,UAAf,CAAR;AACA;;AAEA;AACAV,IAAIkB,GAAJ,CAAQ,OAAR,EAAiB,UAACC,GAAD,EAAMC,GAAN;AAAA,SACfA,IAAIb,IAAJ,CAAS;AACPc,SAAK,KADE;AAEPC,UAAMpB,QAAQC,GAAR,CAAYC,QAFX;AAGPmB,UAAMrB,QAAQC,GAAR,CAAYqB,IAHX;AAIPC,UAAMvB,QAAQC,GAAR,CAAYuB,IAJX;AAKPC,gBAAY1B;AALL,GAAT,CADe;AAAA,CAAjB;;AAUA;AACAD,IAAIkB,GAAJ,CAAQ,eAAR,EAAyB,UAACC,GAAD,EAAMC,GAAN;AAAA,SAAcQ,WAAW,YAAM;AACtDC,iBAAGC,QAAH,CAAYnB,eAAKC,IAAL,CAAUC,SAAV,EAAqB,iBAArB,CAAZ,EAAqD,MAArD,EAA6D,UAAUkB,GAAV,EAAeC,IAAf,EAAqB;AAChF,UAAID,GAAJ,EAAS,MAAMA,GAAN;AACT,UAAME,MAAMC,KAAKC,KAAL,CAAWH,IAAX,CAAZ;;AAEA,UAAII,SAASC,KAAKC,MAAL,KAAgB,GAA7B;AACAF,gBAAUhB,IAAIb,IAAJ,CAAS0B,GAAT,CAAV,IAA2Bb,IAAImB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,EAA3B;AACD,KAND;AAOD,GARsC,EAQpC,IARoC,CAAd;AAAA,CAAzB;;AAUA,IAAMC,aAAavC,QAAQC,GAAR,CAAYqB,IAAZ,IAAoB,IAAvC;AACAxB,IAAI0C,MAAJ,CAAWD,UAAX;AACA3B,QAAQC,GAAR,wCAAiD0B,UAAjD,WAAgExC,aAAa,YAAb,GAA4B,aAA5F;;;;;;;;;;;;0BArCMD,G;0BACAC,U;0BAOAS,U;0BA2BA+B,U\",\"file\":\"server/index.js\",\"sourcesContent\":[\"// load .env using dotenv first\\nrequire('env-autoload')\\n\\n// include other main deps\\nimport express from 'express'\\nimport bodyParser from 'body-parser'\\nimport compression from 'compression'\\nimport path from 'path'\\nimport fs from 'fs'\\n// const pkg = require('../package.json')\\n\\n\\n// instantiate express\\nconst app = express()\\nconst PRODUCTION = process.env.NODE_ENV === 'production'\\n\\napp.use(bodyParser.json())\\napp.use(bodyParser.urlencoded({ extended: false }))\\napp.use(compression())\\n\\n// static serving from /dist/client\\nconst staticPath = path.join(__dirname, '../dist/client')\\nconsole.log(`serving static content from ${staticPath}`)\\napp.use(express.static(staticPath))\\n// app.use('/client', express.static(staticPath))\\n\\n// example API entry\\napp.get('/test', (req, res) =>\\n  res.json({\\n    foo: 'bar',\\n    mode: process.env.NODE_ENV,\\n    port: process.env.PORT,\\n    test: process.env.TEST,\\n    production: PRODUCTION\\n  })\\n)\\n\\n// json import support\\napp.get('/package.json', (req, res) => setTimeout(() => {\\n  fs.readFile(path.join(__dirname, '../package.json'), 'utf8', function (err, data) {\\n    if (err) throw err;\\n    const pkg = JSON.parse(data)\\n\\n    let chance = Math.random() > 0.4\\n    chance && res.json(pkg) || res.status(403).send()\\n  })\\n}, 1000))\\n\\nconst serverPort = process.env.PORT || 3000\\napp.listen(serverPort)\\nconsole.log(`Express server @ http://localhost:${serverPort} (${PRODUCTION ? 'production' : 'development'})\\\\n`)\\n\"]}",
headerContent: ["/* fuse:injection: */ var process = require(\"process\");"],
mtime: 1529199820038,
devLibsRequired : undefined,
ac : undefined,
_ : {}
}
