module.exports = { contents: "'use strict';\n\nvar _express = require('express');\n\nvar _express2 = _interopRequireDefault(_express);\n\nvar _bodyParser = require('body-parser');\n\nvar _bodyParser2 = _interopRequireDefault(_bodyParser);\n\nvar _compression = require('compression');\n\nvar _compression2 = _interopRequireDefault(_compression);\n\nvar _package = require('../package.json');\n\nvar _package2 = _interopRequireDefault(_package);\n\nvar _appRootPath = require('app-root-path');\n\nvar _appRootPath2 = _interopRequireDefault(_appRootPath);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(function () {\n  var enterModule = require('react-hot-loader').enterModule;\n\n  enterModule && enterModule(module);\n})();\n\n// load .env using dotenv first\nrequire('env-autoload');\n\n// include other main deps\n\n\n// instantiate express\nvar app = (0, _express2.default)();\nvar PRODUCTION = process.env.NODE_ENV === 'production';\n\napp.use(_bodyParser2.default.json());\napp.use(_bodyParser2.default.urlencoded({ extended: false }));\napp.use((0, _compression2.default)());\n\n// static serving from /dist/client\napp.use(_express2.default.static(_appRootPath2.default + '/dist/client'));\napp.use('/client', _express2.default.static(_appRootPath2.default + '/dist/client'));\n\n// example API entry\napp.get('/test', function (req, res) {\n  return res.json({\n    foo: 'bar',\n    mode: process.env.NODE_ENV,\n    port: process.env.PORT,\n    test: process.env.TEST,\n    production: PRODUCTION\n  });\n});\n\n// json import support\napp.get('/package.json', function (req, res) {\n  return setTimeout(function () {\n    var chance = Math.random() > 0.4;\n    chance && res.json(_package2.default) || res.status(403).send();\n  }, 1000);\n});\n\nvar serverPort = process.env.PORT || 3000;\napp.listen(serverPort);\nconsole.log('Express server @ http://localhost:' + serverPort + ' (' + (PRODUCTION ? 'production' : 'development') + ')\\n');\n;\n\n(function () {\n  var reactHotLoader = require('react-hot-loader').default;\n\n  var leaveModule = require('react-hot-loader').leaveModule;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(app, 'app', 'unknown');\n  reactHotLoader.register(PRODUCTION, 'PRODUCTION', 'unknown');\n  reactHotLoader.register(serverPort, 'serverPort', 'unknown');\n  leaveModule(module);\n})();\n\n;",
dependencies: ["express","body-parser","compression","../package.json","app-root-path","react-hot-loader","env-autoload","react-hot-loader","react-hot-loader","process"],
sourceMap: "{\"version\":3,\"sources\":[\"/server/index.js\"],\"names\":[\"require\",\"app\",\"PRODUCTION\",\"process\",\"env\",\"NODE_ENV\",\"use\",\"bodyParser\",\"json\",\"urlencoded\",\"extended\",\"express\",\"static\",\"APP_ROOT\",\"get\",\"req\",\"res\",\"foo\",\"mode\",\"port\",\"PORT\",\"test\",\"TEST\",\"production\",\"setTimeout\",\"chance\",\"Math\",\"random\",\"pkg\",\"status\",\"send\",\"serverPort\",\"listen\",\"console\",\"log\"],\"mappings\":\";;AAIA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;AARA;AACAA,QAAQ,cAAR;;AAEA;;;AAQA;AACA,IAAMC,MAAM,wBAAZ;AACA,IAAMC,aAAaC,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAA5C;;AAEAJ,IAAIK,GAAJ,CAAQC,qBAAWC,IAAX,EAAR;AACAP,IAAIK,GAAJ,CAAQC,qBAAWE,UAAX,CAAsB,EAAEC,UAAU,KAAZ,EAAtB,CAAR;AACAT,IAAIK,GAAJ,CAAQ,4BAAR;;AAEA;AACAL,IAAIK,GAAJ,CAAQK,kBAAQC,MAAR,CAAeC,wBAAW,cAA1B,CAAR;AACAZ,IAAIK,GAAJ,CAAQ,SAAR,EAAmBK,kBAAQC,MAAR,CAAeC,wBAAW,cAA1B,CAAnB;;AAEA;AACAZ,IAAIa,GAAJ,CAAQ,OAAR,EAAiB,UAACC,GAAD,EAAMC,GAAN;AAAA,SACfA,IAAIR,IAAJ,CAAS;AACPS,SAAK,KADE;AAEPC,UAAMf,QAAQC,GAAR,CAAYC,QAFX;AAGPc,UAAMhB,QAAQC,GAAR,CAAYgB,IAHX;AAIPC,UAAMlB,QAAQC,GAAR,CAAYkB,IAJX;AAKPC,gBAAYrB;AALL,GAAT,CADe;AAAA,CAAjB;;AAUA;AACAD,IAAIa,GAAJ,CAAQ,eAAR,EAAyB,UAACC,GAAD,EAAMC,GAAN;AAAA,SAAcQ,WAAW,YAAM;AACtD,QAAIC,SAASC,KAAKC,MAAL,KAAgB,GAA7B;AACAF,cAAUT,IAAIR,IAAJ,CAASoB,iBAAT,CAAV,IAA2BZ,IAAIa,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,EAA3B;AACD,GAHsC,EAGpC,IAHoC,CAAd;AAAA,CAAzB;;AAKA,IAAMC,aAAa5B,QAAQC,GAAR,CAAYgB,IAAZ,IAAoB,IAAvC;AACAnB,IAAI+B,MAAJ,CAAWD,UAAX;AACAE,QAAQC,GAAR,wCAAiDH,UAAjD,WAAgE7B,aAAa,YAAb,GAA4B,aAA5F;;;;;;;;;;;;0BA9BMD,G;0BACAC,U;0BA2BA6B,U\",\"file\":\"server/index.js\",\"sourcesContent\":[\"// load .env using dotenv first\\nrequire('env-autoload')\\n\\n// include other main deps\\nimport express from 'express'\\nimport bodyParser from 'body-parser'\\nimport compression from 'compression'\\nimport pkg from '../package.json'\\nimport APP_ROOT from 'app-root-path'\\n\\n\\n// instantiate express\\nconst app = express()\\nconst PRODUCTION = process.env.NODE_ENV === 'production'\\n\\napp.use(bodyParser.json())\\napp.use(bodyParser.urlencoded({ extended: false }))\\napp.use(compression())\\n\\n// static serving from /dist/client\\napp.use(express.static(APP_ROOT + '/dist/client'))\\napp.use('/client', express.static(APP_ROOT + '/dist/client'))\\n\\n// example API entry\\napp.get('/test', (req, res) =>\\n  res.json({\\n    foo: 'bar',\\n    mode: process.env.NODE_ENV,\\n    port: process.env.PORT,\\n    test: process.env.TEST,\\n    production: PRODUCTION\\n  })\\n)\\n\\n// json import support\\napp.get('/package.json', (req, res) => setTimeout(() => {\\n  let chance = Math.random() > 0.4\\n  chance && res.json(pkg) || res.status(403).send()\\n}, 1000))\\n\\nconst serverPort = process.env.PORT || 3000\\napp.listen(serverPort)\\nconsole.log(`Express server @ http://localhost:${serverPort} (${PRODUCTION ? 'production' : 'development'})\\\\n`)\\n\"]}",
headerContent: ["/* fuse:injection: */ var process = require(\"process\");"],
mtime: 1529092609293,
devLibsRequired : undefined,
ac : undefined,
_ : {}
}
