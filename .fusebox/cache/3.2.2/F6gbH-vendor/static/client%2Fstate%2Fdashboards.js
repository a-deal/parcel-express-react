module.exports = { contents: "'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.actionReducers = exports.initialState = exports.selectors = exports.namespace = undefined;\n\nvar _immutable = require('immutable');\n\nvar _reduxAutomap = require('redux-automap');\n\nvar _reselect = require('reselect');\n\nvar _dashboards = require('./dashboards.models');\n\n(function () {\n  var enterModule = require('react-hot-loader').enterModule;\n\n  enterModule && enterModule(module);\n})();\n\nvar namespace = exports.namespace = 'dashboards';\n\nvar getTags = function getTags(state) {\n  return state.get('tags');\n};\nvar getGroups = function getGroups(state) {\n  return state.get('groups');\n};\nvar findTag = function findTag(state, id) {\n  return state.get('tags').find(function (tag) {\n    return tag.get('id') === id;\n  });\n};\nvar findGroup = function findGroup(state, id) {\n  return state.get('groups').find(function (group) {\n    return group.get('id') === id;\n  });\n};\nvar getLastId = function getLastId(items) {\n  return items.maxBy(function (i) {\n    return i.get('id');\n  }).get('id');\n};\nvar getLastTagID = (0, _reselect.createSelector)(getTags, getLastId);\nvar getLastGroupID = (0, _reselect.createSelector)(getGroups, getLastId);\n\nvar selectors = exports.selectors = {\n  getTags: getTags, findTag: findTag\n\n  // initial state for reducer\n};var initialState = exports.initialState = (0, _immutable.fromJS)({\n  tags: [{ id: 1, name: 'foo' }, { id: 2, name: 'bar' }, { id: 3, name: 'baz' }, { id: 4, name: 'cat' }, { id: 5, name: 'miffles' }, { id: 6, name: 'vlad' }, { id: 7, name: 'baxter' }],\n  groups: [new _dashboards.Group({ id: 1, name: 'First Group' })]\n});\n\n// define all action/reducer pairs here... add \"type\" attributes for\nvar actionReducers = exports.actionReducers = [{\n  addGroup: function addGroup(name, parent) {\n    return { type: 'list/ADD_GROUP', name: name, parent: parent };\n  },\n  reducer: function reducer(state, action) {\n    var nextID = getLastGroupID(state) + 1;\n\n    return state.update('groups', function (groups) {\n      return groups.push(new _dashboards.Group({ id: nextID, name: action.name, parent: action.parent }));\n    });\n  }\n}, {\n  addTagToGroup: function addTagToGroup(tagID, groupID) {\n    return { type: 'list/ADD_TAG_TO_GROUP', tagID: tagID, groupID: groupID };\n  },\n  reducer: function reducer(state, action) {\n    var tag = findTag(state, action.tagID);\n    var matchedGroup = findGroup(state, action.groupID);\n\n    console.log('matched tag', tag.toJS());\n    console.log('matched group', matchedGroup.toJS());\n\n    if (!tag) {\n      throw new Error('no tag found with id=' + tagID, action);\n      return state;\n    }\n\n    if (!matchedGroup) {\n      throw new Error('no group found with id=' + groupID, action);\n      return state;\n    }\n\n    return state.update('groups', function (groups) {\n      return groups.map(function (group) {\n        return group === matchedGroup ? group.update('tags', function (tags) {\n          return tags.push(new _dashboards.GroupedTag({ id: tag.get('id'), name: tag.get('name') }));\n        }) : group;\n      });\n    });\n  }\n}];\n\nvar _default = (0, _reduxAutomap.automap)({ namespace: namespace, actionReducers: actionReducers, initialState: initialState, selectors: selectors });\n\nexports.default = _default;\n;\n\n(function () {\n  var reactHotLoader = require('react-hot-loader').default;\n\n  var leaveModule = require('react-hot-loader').leaveModule;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(namespace, 'namespace', 'unknown');\n  reactHotLoader.register(getTags, 'getTags', 'unknown');\n  reactHotLoader.register(getGroups, 'getGroups', 'unknown');\n  reactHotLoader.register(findTag, 'findTag', 'unknown');\n  reactHotLoader.register(findGroup, 'findGroup', 'unknown');\n  reactHotLoader.register(getLastId, 'getLastId', 'unknown');\n  reactHotLoader.register(getLastTagID, 'getLastTagID', 'unknown');\n  reactHotLoader.register(getLastGroupID, 'getLastGroupID', 'unknown');\n  reactHotLoader.register(selectors, 'selectors', 'unknown');\n  reactHotLoader.register(initialState, 'initialState', 'unknown');\n  reactHotLoader.register(actionReducers, 'actionReducers', 'unknown');\n  reactHotLoader.register(_default, 'default', 'unknown');\n  leaveModule(module);\n})();\n\n;",
dependencies: ["immutable","redux-automap","reselect","./dashboards.models","react-hot-loader","react-hot-loader","react-hot-loader"],
sourceMap: {},
headerContent: undefined,
mtime: 1529087373208,
devLibsRequired : undefined,
ac : undefined,
_ : {}
}
