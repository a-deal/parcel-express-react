{"version":3,"sources":["/server/index.js"],"names":["require","app","PRODUCTION","process","env","NODE_ENV","use","bodyParser","json","urlencoded","extended","staticPath","path","join","__dirname","console","log","express","static","get","req","res","foo","mode","port","PORT","test","TEST","production","setTimeout","fs","readFile","err","data","pkg","JSON","parse","chance","Math","random","status","send","serverPort","listen"],"mappings":";;;;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;MALA;;;AAMA;;AAEA;AACAA,QAAQ,cAAR;;AAEA;AACA,IAAMC,MAAM,wBAAZ;AACA,IAAMC,aAAaC,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAA5C;;AAEAJ,IAAIK,GAAJ,CAAQC,qBAAWC,IAAX,EAAR;AACAP,IAAIK,GAAJ,CAAQC,qBAAWE,UAAX,CAAsB,EAAEC,UAAU,KAAZ,EAAtB,CAAR;AACAT,IAAIK,GAAJ,CAAQ,4BAAR;;AAEA;AACA,IAAMK,aAAaC,eAAKC,IAAL,CAAUC,SAAV,EAAqB,gBAArB,CAAnB;AACAC,QAAQC,GAAR,kCAA2CL,UAA3C;AACAV,IAAIK,GAAJ,CAAQW,kBAAQC,MAAR,CAAeP,UAAf,CAAR;AACA;;AAEA;AACAV,IAAIkB,GAAJ,CAAQ,OAAR,EAAiB,UAACC,GAAD,EAAMC,GAAN;AAAA,SACfA,IAAIb,IAAJ,CAAS;AACPc,SAAK,KADE;AAEPC,UAAMpB,QAAQC,GAAR,CAAYC,QAFX;AAGPmB,UAAMrB,QAAQC,GAAR,CAAYqB,IAHX;AAIPC,UAAMvB,QAAQC,GAAR,CAAYuB,IAJX;AAKPC,gBAAY1B;AALL,GAAT,CADe;AAAA,CAAjB;;AAUA;AACAD,IAAIkB,GAAJ,CAAQ,eAAR,EAAyB,UAACC,GAAD,EAAMC,GAAN;AAAA,SAAcQ,WAAW,YAAM;AACtDC,iBAAGC,QAAH,CAAYnB,eAAKC,IAAL,CAAUC,SAAV,EAAqB,iBAArB,CAAZ,EAAqD,MAArD,EAA6D,UAACkB,GAAD,EAAMC,IAAN,EAAe;AAC1E,UAAID,GAAJ,EAAS,MAAMA,GAAN;;AAET,UAAME,MAAMC,KAAKC,KAAL,CAAWH,IAAX,CAAZ;AACA,UAAMI,SAASC,KAAKC,MAAL,KAAgB,IAE9BF,UAAUhB,IAAIb,IAAJ,CAAS0B,GAAT,CAFoB,CAAhB,IAEcb,IAAImB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,EAF7B;AAGD,KAPD;AAOI,GARiC,EAQ/B,IAR+B,CAAd;AAAA,CAAzB;;AAWA,IAAMC,aAAavC,QAAQC,GAAR,CAAYqB,IAAZ,IAAoB,IAAvC;AACAxB,IAAI0C,MAAJ,CAAWD,UAAX;AACA3B,QAAQC,GAAR,wCAAiD0B,UAAjD,WAAgExC,aAAa,YAAb,GAA4B,aAA5F;;;;;;;;;;;;0BAtCMD,G;0BACAC,U;0BAOAS,U;0BA4BA+B,U","file":"","sourcesContent":["// include other main deps\nimport express from 'express'\nimport bodyParser from 'body-parser'\nimport compression from 'compression'\nimport path from 'path'\nimport fs from 'fs'\n// const pkg = require('../package.json')\n\n// load .env using dotenv first\nrequire('env-autoload')\n\n// instantiate express\nconst app = express()\nconst PRODUCTION = process.env.NODE_ENV === 'production'\n\napp.use(bodyParser.json())\napp.use(bodyParser.urlencoded({ extended: false }))\napp.use(compression())\n\n// static serving from /dist/client\nconst staticPath = path.join(__dirname, '../dist/client')\nconsole.log(`serving static content from ${staticPath}`)\napp.use(express.static(staticPath))\n// app.use('/client', express.static(staticPath))\n\n// example API entry\napp.get('/test', (req, res) =>\n  res.json({\n    foo: 'bar',\n    mode: process.env.NODE_ENV,\n    port: process.env.PORT,\n    test: process.env.TEST,\n    production: PRODUCTION,\n  })\n)\n\n// json import support\napp.get('/package.json', (req, res) => setTimeout(() => {\n  fs.readFile(path.join(__dirname, '../package.json'), 'utf8', (err, data) => {\n    if (err) throw err\n\n    const pkg = JSON.parse(data)\n    const chance = Math.random() > 0.4\n\n    (chance && res.json(pkg)) || res.status(403).send()\n  }) }, 1000)\n)\n\nconst serverPort = process.env.PORT || 3000\napp.listen(serverPort)\nconsole.log(`Express server @ http://localhost:${serverPort} (${PRODUCTION ? 'production' : 'development'})\\n`)\n"]}