{"version":3,"sources":["/server/index.js"],"names":["require","pkg","app","PRODUCTION","process","env","NODE_ENV","use","bodyParser","json","urlencoded","extended","staticPath","path","join","__dirname","console","log","express","static","get","req","res","foo","mode","port","PORT","test","TEST","production","setTimeout","chance","Math","random","status","send","serverPort","listen"],"mappings":";;;;;;;AAIA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;AAPA;AACAA,QAAQ,cAAR;;AAEA;;AAKA,IAAMC,MAAMD,QAAQ,iBAAR,CAAZ;;AAEA;AACA,IAAME,MAAM,wBAAZ;AACA,IAAMC,aAAaC,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAA5C;;AAEAJ,IAAIK,GAAJ,CAAQC,qBAAWC,IAAX,EAAR;AACAP,IAAIK,GAAJ,CAAQC,qBAAWE,UAAX,CAAsB,EAAEC,UAAU,KAAZ,EAAtB,CAAR;AACAT,IAAIK,GAAJ,CAAQ,4BAAR;;AAEA;AACA,IAAMK,aAAaC,eAAKC,IAAL,CAAUC,SAAV,EAAqB,SAArB,CAAnB;AACAC,QAAQC,GAAR,kCAA2CL,UAA3C;AACAV,IAAIK,GAAJ,CAAQW,kBAAQC,MAAR,CAAeP,UAAf,CAAR;AACA;;AAEA;AACAV,IAAIkB,GAAJ,CAAQ,OAAR,EAAiB,UAACC,GAAD,EAAMC,GAAN;AAAA,SACfA,IAAIb,IAAJ,CAAS;AACPc,SAAK,KADE;AAEPC,UAAMpB,QAAQC,GAAR,CAAYC,QAFX;AAGPmB,UAAMrB,QAAQC,GAAR,CAAYqB,IAHX;AAIPC,UAAMvB,QAAQC,GAAR,CAAYuB,IAJX;AAKPC,gBAAY1B;AALL,GAAT,CADe;AAAA,CAAjB;;AAUA;AACAD,IAAIkB,GAAJ,CAAQ,eAAR,EAAyB,UAACC,GAAD,EAAMC,GAAN;AAAA,SAAcQ,WAAW,YAAM;AACtD,QAAIC,SAASC,KAAKC,MAAL,KAAgB,GAA7B;AACAF,cAAUT,IAAIb,IAAJ,CAASR,GAAT,CAAV,IAA2BqB,IAAIY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,EAA3B;AACD,GAHsC,EAGpC,IAHoC,CAAd;AAAA,CAAzB;;AAKA,IAAMC,aAAahC,QAAQC,GAAR,CAAYqB,IAAZ,IAAoB,IAAvC;AACAxB,IAAImC,MAAJ,CAAWD,UAAX;AACApB,QAAQC,GAAR,wCAAiDmB,UAAjD,WAAgEjC,aAAa,YAAb,GAA4B,aAA5F;;;;;;;;;;;;0BAhCMD,G;0BACAC,U;0BAOAS,U;0BAsBAwB,U","file":"","sourcesContent":["// load .env using dotenv first\nrequire('env-autoload')\n\n// include other main deps\nimport express from 'express'\nimport bodyParser from 'body-parser'\nimport compression from 'compression'\nimport path from 'path'\nconst pkg = require('../package.json')\n\n// instantiate express\nconst app = express()\nconst PRODUCTION = process.env.NODE_ENV === 'production'\n\napp.use(bodyParser.json())\napp.use(bodyParser.urlencoded({ extended: false }))\napp.use(compression())\n\n// static serving from /dist/client\nconst staticPath = path.join(__dirname, '../dist')\nconsole.log(`serving static content from ${staticPath}`)\napp.use(express.static(staticPath))\n// app.use('/client', express.static(staticPath))\n\n// example API entry\napp.get('/test', (req, res) =>\n  res.json({\n    foo: 'bar',\n    mode: process.env.NODE_ENV,\n    port: process.env.PORT,\n    test: process.env.TEST,\n    production: PRODUCTION\n  })\n)\n\n// json import support\napp.get('/package.json', (req, res) => setTimeout(() => {\n  let chance = Math.random() > 0.4\n  chance && res.json(pkg) || res.status(403).send()\n}, 1000))\n\nconst serverPort = process.env.PORT || 3000\napp.listen(serverPort)\nconsole.log(`Express server @ http://localhost:${serverPort} (${PRODUCTION ? 'production' : 'development'})\\n`)\n"]}